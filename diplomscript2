-- Database: OrganizationControl

-- DROP DATABASE "OrganizationControl";

CREATE DATABASE "OrganizationControl"
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'Russian_Russia.1251'
    LC_CTYPE = 'Russian_Russia.1251'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	
CREATE TABLE Organization
(
 ID_Organization SERIAL NOT NULL,
 Name            varchar(250) NOT NULL,
 Addres          varchar(250) NOT NULL,
 INN             varchar(13) NOT NULL,
 Budget          decimal(36,2) NOT NULL,
 Auth_Key varchar(255) DEFAULT 'NoKey',
 Date_Foundation date NOT NULL,
 CONSTRAINT PK_1 PRIMARY KEY ( ID_Organization )
);

CREATE TABLE Department
(
 ID_Department   SERIAL NOT NULL,
 Name            varchar(50) NOT NULL,
 Description     varchar(250) NOT NULL,
 Organization_ID int NOT NULL,
 CONSTRAINT PK_2 PRIMARY KEY ( ID_Department ),
 CONSTRAINT FK_123 FOREIGN KEY ( Organization_ID ) REFERENCES Organization ( ID_Organization )
);

CREATE INDEX FK_21 ON Department
(
 Organization_ID
);

ALTER TABLE "User"
-- ADD COLUMN Employee_ID int,
ADD CONSTRAINT FK_23 FOREIGN KEY ( Employee_ID ) REFERENCES Employee ( ID_Employee );
CREATE INDEX FK_27 ON "User"
(
 Employee_ID
);

-- ALTER TABLE Organization
-- ADD COLUMN Auth_Key varchar(255)


CREATE TABLE Employee
(
 ID_Employee SERIAL NOT NULL,
 Surname     varchar(50) NOT NULL,
 Name        varchar(50) NOT NULL,
 SecondName  varchar(50) NOT NULL,
 Date_Birth  date NOT NULL,
 SeriaPasp   varchar(4) NOT NULL,
 NumberPasp  varchar(6) NOT NULL,
 Email       varchar(50) NOT NULL,
 Department_ID int,
 User_ID     int,
 CONSTRAINT PK_11 PRIMARY KEY ( ID_Employee ),
 CONSTRAINT FK_9 FOREIGN KEY ( User_ID ) REFERENCES "User" ( ID_User ),
 CONSTRAINT FK_25 FOREIGN KEY ( Department_ID ) REFERENCES Department ( ID_Department )
);

CREATE INDEX FK_2 ON Employee
(
 User_ID
);
CREATE INDEX FK_25 ON Employee
(
 Department_ID
);


CREATE TABLE "User"
(
 ID_User  SERIAL NOT NULL,
 Login    varchar(50) NOT NULL,
 Password varchar(50) NOT NULL,
 CONSTRAINT PK_10 PRIMARY KEY ( ID_User )
);



CREATE TABLE Employee_Post
(
 ID_Employee_Post SERIAL NOT NULL,
 Post_ID          int NOT NULL,
 Employee_ID      int NOT NULL,
 CONSTRAINT PK_4 PRIMARY KEY ( ID_Employee_Post ),
 CONSTRAINT FK_66 FOREIGN KEY ( Post_ID ) REFERENCES Post ( ID_Post ),
 CONSTRAINT FK_7 FOREIGN KEY ( Employee_ID ) REFERENCES Employee ( ID_Employee )
);

CREATE INDEX FK_66 ON Employee_Post
(
 Post_ID
);

CREATE INDEX FK_8 ON Employee_Post
(
 Employee_ID
);

CREATE TABLE Finances_Operations
(
 ID_Operations   SERIAL NOT NULL,
 Summ            decimal(36,2) NOT NULL,
 Date_Operation  date NOT NULL,
 Description     varchar(250) NOT NULL,
 Organization_ID int NOT NULL,
 CONSTRAINT PK_5 PRIMARY KEY ( ID_Operations ),
 CONSTRAINT FK_2 FOREIGN KEY ( Organization_ID ) REFERENCES Organization ( ID_Organization )
);

CREATE INDEX FK_7 ON Finances_Operations
(
 Organization_ID
);

CREATE TABLE Goal
(
 ID_Goal       SERIAL NOT NULL,
 Name          varchar(50) NOT NULL,
 Description   varchar(250) NOT NULL,
 Date_Start    date NOT NULL,
 Date_End      date NOT NULL,
 Done          boolean DEFAULT FALSE,
 Department_ID int NOT NULL,
 CONSTRAINT PK_6 PRIMARY KEY ( ID_Goal ),
 CONSTRAINT FK_4 FOREIGN KEY ( Department_ID ) REFERENCES Department ( ID_Department )
);

CREATE INDEX FK_6 ON Goal
(
 Department_ID
);

CREATE TABLE Post
(
 ID_Post       SERIAL NOT NULL,
 Name          varchar(250) NOT NULL,
 Salary        decimal(36,2) NOT NULL,
 Department_ID int NOT NULL,
 CONSTRAINT PK_7 PRIMARY KEY ( ID_Post ),
 CONSTRAINT FK_5 FOREIGN KEY ( Department_ID ) REFERENCES Department ( ID_Department )
);

CREATE INDEX FK_5 ON Post
(
 Department_ID
);


CREATE TABLE Strategy
(
 ID_Strategy     SERIAL NOT NULL,
 Name            varchar(50) NOT NULL,
 Description     varchar(250) NOT NULL,
 Date_start      date NOT NULL,
 Date_end        date NOT NULL,
 Done            boolean DEFAULT FALSE,
 Organization_ID int NOT NULL,
 CONSTRAINT PK_8 PRIMARY KEY ( ID_Strategy ),
 CONSTRAINT FK_1 FOREIGN KEY ( Organization_ID ) REFERENCES Organization ( ID_Organization )
);

CREATE INDEX FK_4 ON Strategy
(
 Organization_ID
);

CREATE TABLE Task
(
 ID_Task     SERIAL NOT NULL,
 Name        varchar(50) NOT NULL,
 Description varchar(250) NOT NULL,
 Date_Start  date NOT NULL,
 Date_End    date NOT NULL,
 Done        boolean DEFAULT FALSE,
 Employee_ID int NOT NULL,
 CONSTRAINT PK_9 PRIMARY KEY ( ID_Task ),
 CONSTRAINT FK_8 FOREIGN KEY ( Employee_ID ) REFERENCES Employee ( ID_Employee )
);

CREATE INDEX FK_3 ON Task
(
 Employee_ID
);

DROP FUNCTION insert_organization

CREATE OR REPLACE FUNCTION public.update_organization(
	p_id int,
	p_name varchar(250),
	p_addres varchar(250),
	p_inn varchar(13),
	p_budget decimal(36,2),
	p_date_foundation date)
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	update organization
	set
	name = $2,
	addres = $3,
	inn = $4,
	budget = $5,
	date_foundation = $6
	where id_organization = $1;
	return true;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.generate_key(
	p_id int,
	p_Auth_Key varchar(255))
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	update organization
	set
	auth_key = $2
	where id_organization = $1;
	return true;
end;
$BODY$;


CREATE OR REPLACE FUNCTION public.insert_organization(
	p_name varchar(250),
	p_addres varchar(250),
	p_inn varchar(13),
	p_budget decimal(36,2),
	p_date_foundation date,
	p_Auth_Key varchar(255))
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	insert into organization(name,addres,inn,budget,date_foundation, auth_key) 
	values (p_name,p_addres,p_inn,p_budget, p_date_foundation, p_Auth_Key) returning id_organization into tempid;
	RETURN tempid;
end;
$BODY$;

ALTER FUNCTION public.update_organization(int, varchar(250), varchar(250), varchar(13), decimal(36,2), date)
    OWNER TO postgres;


SELECT insert_organization('new', 'testnew', '84972', 30000.21, '2023/07/02');

CREATE OR REPLACE FUNCTION public.update_Finances_Operations(
	p_id int,
	p_Summ decimal(36,2),
	p_Date_Operation date,
	p_Description varchar(250),
	p_Organization_ID int)
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	update Finances_Operations
	set
	Summ = $2,
	Date_Operation = $3,
	Description = $4,
	Organization_ID=$5
	where ID_Operations = $1;
	return true;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.insert_Finances_Operations(
	p_Summ decimal(36,2),
	p_Date_Operation date,
	p_Description varchar(250),
	p_Organization_ID int)
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	insert into Finances_Operations(Summ,Date_Operation,Description,Organization_ID) 
	values (p_Summ,p_Date_Operation,p_Description,p_Organization_ID) returning id_operations into tempid;
	return tempid;
end;
$BODY$;


CREATE OR REPLACE FUNCTION public.update_Employee(
	p_id int,
	p_Surname varchar(50),
	p_Name varchar(50),
	p_SecondName varchar(50),
	p_Date_Birth date,
	p_SeriaPasp varchar(4),
	p_NumberPasp varchar(6),
	p_Email varchar(50),
	p_Department_ID int)
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	update Employee
	set
	Surname = $2,
	Name = $3,
	SecondName = $4,
	Date_Birth=$5,
	SeriaPasp=$6,
	NumberPasp=$7,
	Email=$8,
	Department_ID=$9
	where ID_Employee = $1;
	return true;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.insert_Employee(
	p_Surname varchar(50),
	p_Name varchar(50),
	p_SecondName varchar(50),
	p_Date_Birth date,
	p_SeriaPasp varchar(4),
	p_NumberPasp varchar(6),
	p_Email varchar(50),
	p_Department_ID int)
   	RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	insert into Employee(Surname,Name,SecondName,Date_Birth,SeriaPasp, NumberPasp, Email, Department_ID) 
	values (p_Surname,p_Name,p_SecondName,p_Date_Birth,p_SeriaPasp, p_NumberPasp, p_Email, p_Department_ID) returning id_employee into tempid;
	return tempid;
end;
$BODY$;


CREATE OR REPLACE FUNCTION public.update_User(
	p_id int,
	p_Login varchar(50),
	p_Password varchar(50),
	p_Employee_ID int)
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	update Users
	set
	Login = $2,
	Password = $3,
	Employee_ID=$4
	where ID_User = $1;
	return true;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.insert_User(
	p_Login varchar(50),
	p_Password varchar(50),
	p_Employee_ID int)
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	insert into Users(Login,Password, Employee_ID) 
	values (p_Login,p_Password,p_Employee_ID) returning id_user into tempid;
	return tempid;
end;
$BODY$;


CREATE OR REPLACE FUNCTION public.update_Employee_Post(
	p_Post_ID int,
	p_Employee_ID int)
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	delete from Employee_Post where Employee_ID = p_Employee_ID AND Post_ID=p_Post_ID;
	insert into Employee_Post(Post_ID,Employee_ID) 
	values (p_Post_ID,p_Employee_ID);
	return true;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.insert_Employee_Post(
	p_Post_ID int,
	p_Employee_ID int)
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	insert into Employee_Post(Post_ID,Employee_ID) 
	values (p_Post_ID,p_Employee_ID) returning id_employee_post into tempid;
	return tempid;
end;
$BODY$;


CREATE OR REPLACE FUNCTION public.update_Post(
	p_id int,
	p_Name varchar(250),
	p_Salary decimal(36,2),
	p_Department_ID int)
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	update Post
	set
	Name = $2,
	Salary = $3,
	Department_ID=$4
	where ID_Post = $1;
	return true;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.insert_Post(
	p_Name varchar(250),
	p_Salary decimal(36,2),
	p_Department_ID int)
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	insert into Post(Name,Salary,Department_ID) 
	values (p_Name,p_Salary,p_Department_ID) returning id_post into tempid;
	return tempid;
end;
$BODY$;


CREATE OR REPLACE FUNCTION public.update_Department(
	p_id int,
	p_Name varchar(50),
	p_Description varchar(250),
	p_Organization_ID int)
    RETURNS boolean
    LANGUAGE 'plpgsql'
AS $BODY$
begin
	update Department
	set
	Name=$2,
	Description = $3,
	Organization_ID=$4
	where ID_Department = $1;
	return true;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.insert_Department(
	p_Name varchar(50),
	p_Description varchar(250),
	p_Organization_ID int)
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	insert into Department(Name,Description,Organization_ID) 
	values (p_Name,p_Description,p_Organization_ID) returning id_department into tempid;
	return tempid;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.delete_row(
	tablename character varying,
	table_colname character varying,
	col_value integer)
    RETURNS character
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
begin
	execute format('delete from %s where %s = $1', tablename, table_colname)
	using col_value;
	return 'deleted';
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.delete_EmplPost(
	p_Employee_ID int)
    RETURNS character
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
begin
	delete from Employee_post where Employee_ID=p_Employee_ID;
	return 'deleted';
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.update_SGT(
	p_id int,
	p_name varchar(50),
	p_descr varchar(250),
	p_datetstart date,
	p_dateend date,
	p_done boolean,
	p_foreignkey int,
	foreignkeyname character varying,
	tablename character varying,
	prkeyname character varying)
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
execute format('
	update %s
	set
	name = $2,
	Description = $3,
	Date_start = $4,
	Date_end = $5,
	Done = $6,
	%s=$7
	where %s = $1;', tablename, foreignkeyname, prkeyname)
	using $1, $2, $3, $4, $5, $6, $7;
	return tempid;
end;
$BODY$;

CREATE OR REPLACE FUNCTION public.insert_SGT(
	p_name varchar(50),
	p_descr varchar(250),
	p_datetstart date,
	p_dateend date,
	p_done boolean,
	p_foreignkey int,
	foreignkeyname character varying,
	tablename character varying,
	prkeyname character varying)
    RETURNS int
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE tempid int;
begin
	execute format('insert into %s(name,Description,Date_Start,Date_End, done, %s) 
	values ($1,$2,$3,$4, $5, $6) 
				   returning %s', tablename, foreignkeyname, prkeyname) into tempid
	using $1,$2,$3,$4, $5, $6;
	return tempid;
end;
$BODY$;











ALTER TABLE Task
ADD COLUMN Done boolean DEFAULT FALSE;

ALTER TABLE Employee
ADD COLUMN Department_ID int NOT NULL;

DELETE FROM Users *

ALTER TABLE Users
ADD COLUMN Employee_ID int NOT NULL;

alter table Users 
    add constraint fk_13
    foreign key (Employee_ID) 
    REFERENCES Employee (ID_Employee);

alter table Employee 
    add constraint fk_12
    foreign key (Department_ID) 
    REFERENCES Department (ID_Department);
	
CREATE INDEX FK_13 ON Employee
(
 Department_ID
);



SELECT delete_row('organization', 'id_organization', 20)

SELECT insert_strategy('test','dasd', '20/01/1233', '21/01/2999', true, 2)

SELECT update_SGT(1,'testttttt','desc', '20/01/1233', '21/01/2999', false, 2, 'organization_id', 'Strategy', 'id_Strategy')

SELECT insert_SGT('testttttt','desc', '20/01/1233', '21/01/2999', false, 2, 'organization_id', 'Strategy', 'id_Strategy')


DROP FUNCTION insert_Employee(character varying,character varying,character varying,date,character varying,character varying,character varying,integer)

DROP FUNCTION update_employee(integer,character varying,character varying,character varying,date,character varying,character varying,character varying,integer)


alter table public.strategy
drop constraint FK_1,
add constraint organization_id
   foreign key (organization_id)
   references organization (id_organization)
   on delete cascade;
   
alter table public.finances_operations
drop constraint FK_2,
add constraint organization_id
   foreign key (organization_id)
   references organization (id_organization)
   on delete cascade;
   
alter table public.department
drop constraint FK_123,
add constraint organization_id
   foreign key (organization_id)
   references organization (id_organization)
   on delete cascade;
   
   
alter table public.goal
drop constraint FK_4,
add constraint department_id
   foreign key (department_id)
   references department (id_department)
   on delete cascade;
   
   
alter table public.post
drop constraint FK_5,
add constraint department_id
   foreign key (department_id)
   references department (id_department)
   on delete cascade;
   
   
alter table public.employee
drop constraint FK_25,
add constraint department_id
   foreign key (department_id)
   references department (id_department)
   on delete cascade;


alter table public.task
drop constraint FK_8,
add constraint employee_id
   foreign key (employee_id)
   references employee (id_employee)
   on delete cascade;
   

alter table "User"
drop constraint FK_23,
add constraint employee_id
   foreign key (employee_id)
   references employee (id_employee)
   on delete cascade;
   
   
alter table public.employee_post
drop constraint FK_7,
add constraint employee_id
   foreign key (employee_id)
   references employee (id_employee)
   on delete cascade;
   
alter table public.employee_post
drop constraint FK_66,
add constraint post_id
   foreign key (post_id)
   references post (id_post)
   on delete cascade;